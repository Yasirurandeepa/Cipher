
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Yasiru Randeepa
 */
public class UserInterface extends javax.swing.JFrame {

    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
    }
    String substitution_key;
    String per_key;
    String encrypted;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        encrypt = new javax.swing.JButton();
        decrypt = new javax.swing.JButton();
        encryptText = new javax.swing.JTextField();
        decryptText = new javax.swing.JTextField();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        fileChooser.setDialogTitle("This is my open dialog");
        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textarea.setEditable(false);
        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        encrypt.setText("Encrypt");
        encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptActionPerformed(evt);
            }
        });

        decrypt.setText("Decrypt");
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });

        jMenu3.setText("File");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu3.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu3.add(Exit);

        jMenuBar2.add(jMenu3);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(encryptText)
                    .addComponent(encrypt, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(decrypt, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(decryptText))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decrypt)
                    .addComponent(encrypt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                textarea.read(new FileReader(file.getAbsolutePath()), null);
            } catch (IOException ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptActionPerformed
        String plainTxt = textarea.getText().trim();
        System.out.println(plainTxt);
        Random random = new Random();
        String CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int check;
        char d;
        String token = "";
        while (token.length() != 5) {
            d = CHARS.charAt(random.nextInt(CHARS.length()));
            check = token.indexOf(d);
            if (check < 0) {
                token += d;
            }
        }
        System.out.println(token);
        String substitution_key = token;
        String a = substitution_key;
        for (int i = 0; i < 52; i++) {
            check = substitution_key.indexOf(CHARS.charAt(i));              //making new alphabet
            if (check < 0) {
                a += CHARS.charAt(i);
            }
            if (a.length() == 52) {
                break;
            }
        }
        System.out.println(a);                          //new alphabet
        String c = "";                                  //encrypted string
        int b;
        for (int i = 0; i < plainTxt.length(); i++) {
            b = CHARS.indexOf(plainTxt.charAt(i));
            if ((plainTxt.charAt(i)) == ' ') {              //to cheack space
                substitution_key += i;                  //add the indexes of spaces to the key
            } else if (b >= 0) {                              //to check character exist in alphabet
                c += a.charAt(b);
            } else {
                c += plainTxt.charAt(i);                 //add non alphabet characters
            }
        }
        System.out.println(c);
        System.out.println("Substitutin key: " + substitution_key);

        //////////Permutaion Key////////////
        int div = c.length() / 4;
        int mod = c.length() % 4;
        int j = 0;
        char f, g;
        String temp = "";
        String e, CHARS_per = "1234";
        String per_key = "";                                //generate permutation key

        while (per_key.length() != 4) {
            d = CHARS_per.charAt(random.nextInt(CHARS_per.length()));
            check = per_key.indexOf(d);
            if (check < 0) {
                per_key += d;
            }
        }

        System.out.println("Permutation key: " + per_key);

        for (int i = 0; i < div; i++) {
            if (c.length() - (j + 4) >= 0) {
                e = c.substring(j, j + 4);                       //Divide string by 4 and get each divided string
                StringBuilder swap = new StringBuilder(e);

                f = e.charAt(0);
                g = e.charAt((int) (per_key.charAt(0)) - 49);
                swap.setCharAt(0, g);
                swap.setCharAt(per_key.charAt(0) - 49, f);
                e = swap.toString();
                //System.out.println(swap);

                f = e.charAt(1);
                g = e.charAt((int) (per_key.charAt(1)) - 49);
                swap.setCharAt(1, g);
                swap.setCharAt(per_key.charAt(1) - 49, f);
                e = swap.toString();
                //System.out.println(swap);

                f = e.charAt(2);
                g = e.charAt((int) (per_key.charAt(2)) - 49);
                swap.setCharAt(2, g);
                swap.setCharAt(per_key.charAt(2) - 49, f);
                e = swap.toString();
                //System.out.println(swap);

                f = e.charAt(3);
                g = e.charAt((int) (per_key.charAt(3)) - 49);
                swap.setCharAt(3, g);
                swap.setCharAt(per_key.charAt(3) - 49, f);
                e = swap.toString();
                //System.out.println(swap);

                temp += swap;
                //System.out.println(temp);
                j += 4;
            } else {
                System.out.println("else");
                e = c.substring(j, c.length());
                temp += e;
            }

        }
        temp += c.substring(c.length()-mod,c.length());
        System.out.println(temp);
        this.substitution_key = substitution_key;
        this.per_key = per_key;
        this.encrypted = temp;
        
        encryptText.setText(encrypted);                         //set encrypt text  
    }//GEN-LAST:event_encryptActionPerformed

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        /////////////reverse permutation//////////////
           
        String c = this.encrypted;
        int div = c.length() / 4;
        int j = 0;
        int mod = c.length() % 4;
        char f, g;
        String temp = "", bal="";
        String e;
        if (mod != 0) {
            bal = c;
            c = c.substring(0, c.length() - mod);
        }

        for (int i = 0; i < div; i++) {
            e = c.substring(j, j + 4);                       //Divide string by 4 and get each divided string
            StringBuilder swap = new StringBuilder(e);

            f = e.charAt(3);
            g = e.charAt((int) (per_key.charAt(3)) - 49);
            swap.setCharAt(3, g);
            swap.setCharAt(per_key.charAt(3) - 49, f);
            e = swap.toString();
            //System.out.println(swap);

            f = e.charAt(2);
            g = e.charAt((int) (per_key.charAt(2)) - 49);
            swap.setCharAt(2, g);
            swap.setCharAt(per_key.charAt(2) - 49, f);
            e = swap.toString();
            //System.out.println(swap);

            f = e.charAt(1);
            g = e.charAt((int) (per_key.charAt(1)) - 49);
            swap.setCharAt(1, g);
            swap.setCharAt(per_key.charAt(1) - 49, f);
            e = swap.toString();
            //System.out.println(swap);

            f = e.charAt(0);
            g = e.charAt((int) (per_key.charAt(0)) - 49);
            swap.setCharAt(0, g);
            swap.setCharAt(per_key.charAt(0) - 49, f);
            e = swap.toString();
            //System.out.println(swap);

            temp += swap;
            //System.out.println(temp);
            j += 4;

        }
        temp += bal.substring(bal.length()-mod,bal.length());
        System.out.println(temp);

        //////reverse substitution///////////
        
        int check;
        String CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String numbers = "123456789";
        String isNumber = "";
        String temp_sub="";
        
        for (int i = 0; i<substitution_key.length(); i++) {                                      //remove the numbers from substitution key
            isNumber += substitution_key.charAt(i);
            if(!numbers.contains(isNumber)){
                temp_sub += isNumber;
            }
            isNumber = "";
        }
        String a= temp_sub;
        System.out.println(substitution_key);
        System.out.println(temp_sub);
        for (int i = 0; i < 52; i++) {
            check = temp_sub.indexOf(CHARS.charAt(i));              //making new alphabet
            if (check < 0) {
                a += CHARS.charAt(i);
            }
            if (a.length() == 52) {
                break;
            }
        }
        System.out.println(a);                           //new alphabet
        
        c = "";                                          //decrypted string
        int b;
        for (int i = 0; i < temp.length(); i++) {
            b = a.indexOf(temp.charAt(i));
//            if ((temp.charAt(i)) == ' ') {             //to cheack space
//              substitution_key += i;  }                //add the indexes of spaces to the key
//            if (b >= 0) {                              //to check character exist in alphabet
//                c += a.charAt(b);
//            } else {
//                c += temp.charAt(i);                 //add non alphabet characters
//            }
            if(b>=0){
                c += CHARS.charAt(b);
            }else{
                c += temp.charAt(i);
            }
        }
      
        int space = (int)substitution_key.charAt(substitution_key.length()-1)-48;       //index of space
        String decrypted = c.substring(0,space)+" "+c.substring(space,c.length()) ;     //concatnate of space
        System.out.println("Decrypted :" + decrypted);
        
        decryptText.setText(decrypted);                                                 //set decrypt text
    }//GEN-LAST:event_decryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JButton decrypt;
    private javax.swing.JTextField decryptText;
    private javax.swing.JButton encrypt;
    private javax.swing.JTextField encryptText;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables
}
